from identity.model.id import ParticipantIdentifierType
import pytest
from identity.setup import create_base_data


@pytest.mark.parametrize(
    "id_name",
    [
        ('study_participant_id'),
        ('alleviate_id'),
        ('AS_PROGRESSION_ID'),
        ('BME_COVID_ID'),
        ('BREATHE_DEEP_ID'),
        ('BREATHLESSNESS_ID'),
        ('BRICCS_ID'),
        ('CARDIOMET_ID'),
        ('CARMER_BREATH_ID'),
        ('CHABLIS_ID'),
        ('CIA_ID'),
        ('COHERE_ID'),
        ('COPD_COVID_19_ID'),
        ('COPD_INTRO_ID'),
        ('CTO_ID'),
        ('CVLPRIT_ID'),
        ('CVLPRIT_LOCAL_ID'),
        ('PILOT_ID'),
        ('DAL_GENE_ID'),
        ('DESMOND_ID'),
        ('DHF_ID'),
        ('DISCORDANCE_ID'),
        ('DREAM_ID'),
        ('EASY_AS_ID'),
        ('EDEN_ID'),
        ('EDIFY_ID'),
        ('ELASTIC_AS_ID'),
        ('EPIGENE1_ID'),
        ('MEIRU_ID'),
        ('EXTEND_ID'),
        ('FAST_ID'),
        ('FOAMI_ID'),
        ('BIORESOURCE_ID'),
        ('GENVASC_ID'),
        ('GLOBAL_VIEWS_ID'),
        ('GO_DCM_ID'),
        ('GRAPHIC2_ID'),
        ('tmao_id'),
        ('BRAVE_ID'),
        ('nhs_number'),
        ('uhl_system_number'),
        ('HAD_ID'),
        ('IDAPAMIDE_ID'),
        ('INTERFIELD_ID'),
        ('LENTEN_ID'),
        ('LIMB_ID'),
        ('MARI_ID'),
        ('MCCANN_IMAGE_ID'),
        ('MEL_ID'),
        ('MI_ECMO_ID'),
        ('MINERVA_ID'),
        ('MRP_HFPEF_ID'),
        ('MULTI_MORBID_PRIORITIES_ID'),
        ('NON_ADHERENCE_ID'),
        ('NOVO5K_ID'),
        ('PARC_ID'),
        ('HC_NUMBER'),
        ('CHI_NUMBER'),
        ('PHOSP_COVID19_ID'),
        ('PREDICT_ID'),
        ('PREECLAMPSIA_ID'),
        ('RAPID_NSTEMI_ID'),
        ('RECHARGE_ID'),
        ('REST_ID'),
        ('SALT_ID'),
        ('SCAD_SURVEY_ID'),
        ('SCAD_LOCAL_ID'),
        ('SCAD_ID'),
        ('SCAD_REG_ID'),
        ('SCAD_CAE_ID'),
        ('SKOPE_ID'),
        ('SPACE_FOR_COPD_ID'),
        ('SPIRAL_ID'),
        ('UHL_HCW_COVID_19_ID'),
        ('UPFOR5_ID'),
        ('VASCEGENS_ID'),
        ('yakult_id'),
        ('yoga_id'),
        ('UHL_NUMBER'),
    ],
)
def test__setup__participant_id_type(client, faker, id_name):
    create_base_data()

    assert ParticipantIdentifierType.query.filter_by(name=id_name).one_or_none() is not None

